                                    ________________________________________________

                                     UNLEASHING THE POWER OF GNU/EMACS AND ORG-MODE
                                          A Cache of Wisdom for Thesis Writing

                                                      Felix Drees
                                    ________________________________________________


                                                2024-08-23T17:57:27+0200


The fusion of Doom/Emacs, Org Mode, and LaTeX presents a potent platform for crafting sophisticated thesis
papers.\autocite[see][p. 5]{mac2013categories} This article provides a detailed guide on how to seamlessly integrate
these tools, facilitating a smooth transition between generating HTML and LaTeX documents, as well as PDFs, all from a
single Org Mode file. Furthermore, a Nix shell, accompanied by a shell.nix file, is introduced to ensure efficient
management of the development environment.

Die Vereinigung von Doom/Emacs, Org Mode und LaTeX bietet eine leistungsstarke Plattform zur Verfassung eleganter
Abschlussarbeiten. Dieser Artikel erläutert detailliert, wie man diese Werkzeuge optimal kombiniert, um nahtlos zwischen
der Erstellung von HTML- und LaTeX-Dokumenten sowie PDFs aus einer einzigen Org-Mode-Datei zu wechseln. Zusätzlich wird
eine Nix-Shell mit einer begleitenden shell.nix-Datei vorgestellt, um eine effiziente Verwaltung der Entwicklungs- und
Arbeitsumgebung zu gewährleisten.

Table of Contents
_________________

1. Introduction / Motivation:
.. 1. Why bother writing Org-Mode when I can use LaTeX instead?
..... 1. The possibilities with Org-Mode are endless!
.. 2. summery
..... 1. motivating videos
2. (Doom) GNU/Emacs setup and configuration
.. 1. packages `~/.config/doom/package.el'
.. 2. config `~/.config/doom/config.el'
3. nix shell environment
4. start messing around
5. convert python 2 latex
6. Function composition
7. Some random Proof
8. plotting functions and their root function / derivation
.. 1. python
.. 2. tikzpicture
.. 3. org plot
.. 4. gnu plot
9. logic resolution proof
.. 1. forward direction (->)
.. 2. back direction (<-)
.. 3. both directions (<->)
10. some random appendix
11. TOC's


1 Introduction / Motivation:
============================

  Embarking on the journey of using GNU/Emacs with Org-Mode for thesis writing may seem like a daunting task, especially
  if you're unfamiliar with the intricate workings of GNU/Emacs itself. Some may question the need to delve into
  Org-Mode when alternatives like LaTeX are readily available and widely embraced. However, dismissing the potential of
  GNU/Emacs and Org-Mode prematurely might mean overlooking a transformative experience that can redefine your approach
  to document creation.


1.1 Why bother writing Org-Mode when I can use LaTeX instead?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  While LaTeX is a formidable typesetting system, Org-Mode complements it by offering a more versatile and flexible
  platform for document creation. Org-Mode's simplicity and ease of use, coupled with the ability to seamlessly
  integrate LaTeX, provide a unique writing experience that combines the best of both worlds.


1.1.1 The possibilities with Org-Mode are endless!
--------------------------------------------------

* 1.1.1.1 Include and evaluate code:

  Integrate code seamlessly within your document, making it a dynamic and interactive platform for technical content.


* 1.1.1.2 Write LaTeX in a more relaxed surrounding:

  Org-Mode simplifies the LaTeX integration, providing a more user-friendly and intuitive environment for crafting your
  documents.


1.2 summery
~~~~~~~~~~~

  For this tutorial, we will be using a distribution of GNU/Emacs called DOOM Emacs. Additionally, on our GNU/Linux
  platform, we'll leverage a package manager known as Nix to generate an environment for building both PDF and HTML
  versions of your thesis. This powerful combination of tools will enhance your writing experience and streamline the
  process of creating, editing, and compiling your thesis documents.


1.2.1 motivating videos
-----------------------

  - [Literate Documentation with Emacs and Org Mode]
  - [Consistent Technical Documents Using Emacs and Org Mode]
  - [EmacsConf 2023: Authoring and presenting university courses with Emacs and a full libre software ...]
  - [Emacs Tips - How to Give Presentations with Org Mode]
  - [EmacsConf 2022: Health data journaling and visualization with Org Mode and GNUplot - David O'Toole]


[Literate Documentation with Emacs and Org Mode] <https://youtu.be/BAFZ-vTnfSo?feature=shared>

[Consistent Technical Documents Using Emacs and Org Mode] <https://youtu.be/0g9BcZvQbXU?feature=shared>

[EmacsConf 2023: Authoring and presenting university courses with Emacs and a full libre software ...]
<https://youtu.be/cklJ58i-HUY?feature=shared>

[Emacs Tips - How to Give Presentations with Org Mode] <https://www.youtube.com/live/vz9aLmxYJB0?feature=shared>

[EmacsConf 2022: Health data journaling and visualization with Org Mode and GNUplot - David O'Toole]
<https://youtu.be/YmQ1CYMz-OY?feature=shared>


2 (Doom) GNU/Emacs setup and configuration
==========================================

  Start by installing Doom Emacs.

  <https://youtu.be/37H7bD-G7nE?feature=shared>


2.1 packages `~/.config/doom/package.el'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  After installing Doom Emacs - follow up by installing useful packages. If you are not familiar with Doom Emacs's
  `evil' mode (which is a vim style set of key bindings in Emacs), it might be a good idea to install `evil-tutor' and
  check out the tutorial for `evil' mode.

  The `pdf-tools' (optional for this tutorial) will give you additional functionality for working with PDF documents in
  Doom Emacs, the most important being the support for viewing the PDF document in a Emacs buffer.

  Finlay install `org-special-block-extras' for additional `org-mode' blocks for math and other usefull stuff.

  <div style="padding: 1em;background-color: #CCFFCC;border-radius: 15px;font-size: 0.9em;"> <h3>Note</h3> 
  If you want to use the special blocks in you current org mode session - do not forget to enable it with: <abbr
  class="tooltip" style="border: none; text-decoration: none;" title="M-x ∷ execute-extended-command<br>Read a command
  name, then read the arguments and call the command.<br>To pass a prefix argument to the command you are<br>invoking,
  give a prefix argument to ‘execute-extended-command’.<br><br>This command provides completion when reading the command
  name.<br>Which completion candidates are shown can be controlled by<br>customizing
  ‘read-extended-command-predicate’.<br><br>(fn PREFIXARG &optional COMMAND-NAME TYPED)"><kbd style="border-color:
  red">M-x</kbd></abbr> `org-special-block-extras-mode'

   </div>

  ,----
  | grep "^(package" ~/.config/doom/packages.el | sed 's/).*//; s/$/)/'
  `----

  ,----
  | (package! evil-tutor)
  | (package! pdf-tools)
  | (package! org-special-block-extras)
  | (package! gnuplot)
  | (package! gnuplot-mode)
  | (package! smex)
  | (package! fireplace)
  `----


  <div style="padding: 1em;background-color: #CCFFCC;border-radius: 15px;font-size: 0.9em;"> <h3>Note</h3> 
  Do not forget to `doom sync' after adding new packages to your `package.el' file and reload Emacs.

   </div>


2.2 config `~/.config/doom/config.el'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  To complete the Doom Emacs setup / configuration you only have to addapt your `config.el' file. We will now add the
  `koma' latex document classes and add support for code highlighting.

  ,----
  | grep -v '^\s*;' ~/.config/doom/config.el | awk 'NF {print $0; blank=0} !NF && !blank {print ""; blank=1}'
  | # sed '/^$/N;/^\n$/D;P;D'
  `----

  ,----
  | 
  | (global-set-key (kbd "C-x <up>") 'windmove-up)
  | (global-set-key (kbd "C-x <down>") 'windmove-down)
  | (global-set-key (kbd "C-x <left>") 'windmove-left)
  | (global-set-key (kbd "C-x <right>") 'windmove-right)
  | 
  | (ido-mode 1)
  | (ido-everywhere 1)
  | 
  | (setq tramp-auto-save-directory "/tmp")
  | 
  | (advice-add 'highlight-indent-guides-auto-set-faces :override #'ignore)
  | 
  | (setq debug-on-error t)
  | 
  | (remove-hook 'prog-mode-hook #'yas-minor-mode)
  | (remove-hook 'text-mode-hook #'yas-minor-mode)
  | 
  | (set-face-attribute 'default nil :family "Fira Code" :height 120)
  | 
  | (after! org
  | 
  |   (setq org-babel-min-lines-for-block-output 0)
  |   (setq org-babel-default-header-args
  |         (cons '(:session . "none")
  |               (assq-delete-all :session org-babel-default-header-args)))
  | 
  |   (add-hook #'org-mode-hook #'org-special-block-extras-mode)
  | 
  |   (setq org-ascii-text-width 120)
  | 
  |   (setq org-latex-listings 'minted
  |         org-latex-packages-alist '(("" "minted"))
  |         org-latex-pdf-process
  |         '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
  |           "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
  | 
  |   (setq org-latex-minted-options '(("frame" "lines")
  |                                    ("linenos" "true")
  |                                    ("fontsize" "\\small")
  |                                    ("breaklines" "true")
  |                                    ("breakanywhere" "true")
  |                                    ("tabsize" "4")))
  | 
  |   (setq org-latex-classes
  |         '(("article" "\\documentclass[11pt]{article}"
  |            ("\\section{%s}" . "\\section*{%s}")
  |            ("\\subsection{%s}" . "\\subsection*{%s}")
  |            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  |            ("\\paragraph{%s}" . "\\paragraph*{%s}")
  |            ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
  | 
  |   (add-to-list 'org-latex-classes
  |                '("koma-book" "\\documentclass{scrbook}"
  |                  ("\\chapter{%s}" . "\\chapter*{%s}")
  |                  ("\\section{%s}" . "\\section*{%s}")
  |                  ("\\subsection{%s}" . "\\subsection*{%s}")
  |                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  |                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  |                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  | 
  |   (add-to-list 'org-latex-classes
  |                '("koma-article"
  |                  "\\documentclass{scrartcl}"
  |                  ("\\section{%s}" . "\\section*{%s}")
  |                  ("\\subsection{%s}" . "\\subsection*{%s}")
  |                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  |                  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  |                  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  |   )
  | 
  | (setq doom-theme 'doom-one)
  | 
  | (setq display-line-numbers-type 'relative)
  | 
  | (setq org-directory "~/org/")
  | 
  `----


  <div style="padding: 1em;background-color: #CCFFCC;border-radius: 15px;font-size: 0.9em;"> <h3>Note</h3> 
  Before running <kbd style="">SPC-h-r-r</kbd> (M-x doom/reload) - either wait for the `nix' `env' setup or install
  `pygments' yourself via `pip3 install pygments'.

   </div>


3 nix shell environment
=======================

  Now that Emacs is ready - we can procued by declaring an `shell.nix' environment file, in which we will specify all
  the packages we will use for compiling the `org-mode' file and all library's and other stuff used in the thesis (e.g.
  `numpy' `python' `haskell').

  We will use `gnuplot' for plotting stuff, `graphics' for generating nice graphs in the `dot' language. In addition we
  need `texlive' and therefore can use `tikz' to generate nice plots/graphs. Last but not least, we install the
  `pygments' lib we are using for highlighting the code blocks in addition to the `python' packages used in the source
  code in the thesis.

  If you want to install `haskell' or `R' for your thesis and haven't done so system wide - this might be a good
  opportunity to add the software.

  <div style="padding: 1em;background-color: #CCFFCC;border-radius: 15px;font-size: 0.9em;"> <h3>Install Nix (the package manager)</h3> 

  ,----
  | sh <(curl -L https://nixos.org/nix/install) --daemon
  `----

  <https://nixos.org/download>

   </div>

  ,----
  | cat shell.nix
  `----
  Listing 1: `nix-shell' config for generating a build environment

  ,----
  | { pkgs ? import <nixpkgs> {} }:
  | 
  | pkgs.mkShell {
  |   buildInputs = with pkgs; [
  |     (python312.withPackages(ps: with ps; [
  |       numpy         # for math
  |       # latexify-py   # for converting python funcs to latex
  |       scipy         # for math and physics
  |       pygments      # for syntax highlighting
  |       matplotlib    # for plotting
  |       seaborn       # for plotting
  |       scikit-learn  # for ml stuff
  |     ]))
  |     # texlive.combined.scheme-full
  |     graphviz
  |     gnuplot
  |   ];
  | 
  |   shellHook = ''
  |     echo "entering dev environment"
  |   '';
  | }
  `----


  Run `nix-shell' to enter the now defined development environment.

  After entering our specified environment - you can run `make doom' to start Doom Emacs.


4 start messing around
======================

  Since everything should be ready by now - please feel free to mess around with the `thesis.org' file within Emacs.

  1. start the nix development environment

     ,----
     | nix-shell  # schould open a nix shell with all the packages defined in the local shell.nix config
     `----

  2. open doom Emacs form within the development environment

     ,----
     | doom run &
     `----

  3. open `thesis.org'

     in doom Emacs, you could either open a file with <abbr class="tooltip" style="border: none; text-decoration: none;"
     title="M-x ∷ execute-extended-command<br>Read a command name, then read the arguments and call the command.<br>To
     pass a prefix argument to the command you are<br>invoking, give a prefix argument to
     ‘execute-extended-command’.<br><br>This command provides completion when reading the command name.<br>Which
     completion candidates are shown can be controlled by<br>customizing ‘read-extended-command-predicate’.<br><br>(fn
     PREFIXARG &optional COMMAND-NAME TYPED)"><kbd style="border-color: red">M-x</kbd></abbr> `dired' or by using
     `SPC-.'

  4. mess around

     Finlay adapt the `thesis.org' file for your needs or just explore the file from within Emacs.


  <div style="padding: 1em;background-color: #CCFFCC;border-radius: 15px;font-size: 0.9em;"> <h3>Export to HTML and PDF</h3> 
  You can export your derivative with the key binding: <abbr class="tooltip" style="border: none; text-decoration:
  none;" title="C-c ∷ (keymap (keymap (36 . flyspell-correct-word-before-point)) (keymap (keymap (22 keymap (27 keymap
  (8 . org-babel-mark-block)) (107 . org-babel-remove-result-one-or-many) (120 .
  org-babel-do-key-sequence-in-edit-buffer) (24 . org-babel-do-key-sequence-in-edit-buffer) (104 .
  org-babel-describe-bindings) (97 . org-babel-sha1-hash) (1 . org-babel-sha1-hash) (122 .
  org-babel-switch-to-session-with-code) (26 . org-babel-switch-to-session) (73 . org-babel-view-src-block-info) (105 .
  org-babel-lob-ingest) (9 . org-babel-view-src-block-info) (108 . org-babel-load-in-session) (12 .
  org-babel-load-in-session) (106 . org-babel-insert-header-arg) (10 . org-babel-insert-header-arg) (99 .
  org-babel-check-src-block) (3 . org-babel-check-src-block) (102 . org-babel-tangle-file) (6 . org-babel-tangle-file)
  (116 . org-babel-tangle) (20 . org-babel-tangle) (100 . org-babel-demarcate-block) (4 . org-babel-demarcate-block)
  (115 . org-babel-execute-subtree) (19 . org-babel-execute-subtree) (98 . org-babel-execute-buffer) (2 .
  org-babel-execute-buffer) (18 . org-babel-goto-named-result) (114 . org-babel-goto-named-result) (103 .
  org-babel-goto-named-src-block) (21 . org-babel-goto-src-block-head) (117 . org-babel-goto-src-block-head) (118 .
  org-babel-expand-src-block) (22 . org-babel-expand-src-block) (15 . org-babel-open-src-block-result) (111 .
  org-babel-open-src-block-result) (5 . org-babel-execute-maybe) (101 . org-babel-execute-maybe) (14 .
  org-babel-next-src-block) (110 . org-babel-next-src-block) (16 . org-babel-previous-src-block) (112 .
  org-babel-previous-src-block)) (67108908 . org-insert-structure-template) (67108906 . org-list-make-subtree) (64 .
  org-mark-subtree) (58 . org-toggle-fixed-width) (5 . org-export-dispatch) (123 . org-table-toggle-formula-debugger)
  (125 . org-table-toggle-coordinate-overlays) (1 . org-attach) (126 . org-table-create-with-table.el) (124 .
  org-table-create-or-convert-from-region) (34 keymap (103 . org-plot/gnuplot) (97 . orgtbl-ascii-plot)) (96 .
  org-table-edit-field) (39 . org-edit-special) (61 . org-table-eval-formula) (43 . org-table-sum) (63 .
  org-table-field-info) (35 . org-update-statistics-cookies) (11 . org-kill-note-or-show-branches) (3 .
  org-ctrl-c-ctrl-c) (94 . org-sort) (9 . org-ctrl-c-tab) (42 . org-ctrl-c-star) (45 . org-ctrl-c-minus) (93 .
  org-remove-file) (91 . org-agenda-file-to-front) (60 . org-date-from-calendar) (62 . org-goto-calendar) (25 .
  org-evaluate-time-range) (44 . org-priority) (33 . org-time-stamp-inactive) (46 . org-time-stamp) (26 . org-add-note)
  (38 . org-mark-ring-goto) (37 . org-mark-ring-push) (15 . org-open-at-point) (12 . org-insert-link) (13 .
  org-ctrl-c-ret) (92 . org-match-sparse-tree) (47 . org-sparse-tree) (23 . org-refile) (59 . org-toggle-comment) (4 .
  org-deadline) (19 . org-schedule) (17 . org-set-tags-command) (20 . org-todo) (10 . org-goto) (36 .
  org-archive-subtree) (27 keymap (12 . org-insert-all-links) (108 . org-insert-last-stored-link) (23 .
  org-refile-reverse) (119 . org-refile-copy) (98 . org-previous-block) (102 . org-next-block)) (2 .
  org-backward-heading-same-level) (6 . org-forward-heading-same-level) (31 . org-down-element) (30 . org-up-element)
  (18 . org-fold-reveal) (right . org-shiftright) (left . org-shiftleft) (down . org-shiftdown) (up . org-shiftup)
  (C-tab . org-cycle-force-archived) (24 keymap (73 . org-info-find-node) (91 . org-reftex-citation) (64 .
  org-cite-insert) (71 . org-feed-goto-inbox) (103 . org-feed-update-all) (33 . org-reload) (3 . org-columns) (44 .
  org-timer-pause-or-continue) (59 . org-timer-set-timer) (95 . org-timer-stop) (48 . org-timer-start) (45 .
  org-timer-item) (46 . org-timer) (111 . org-toggle-ordered-property) (69 . org-inc-effort) (101 . org-set-effort) (80
  . org-set-property-and-value) (112 . org-set-property) (18 . org-toggle-radio-button) (2 . org-toggle-checkbox) (92 .
  org-toggle-pretty-entities) (22 . org-toggle-inline-images) (12 . org-latex-preview) (21 . org-dblock-update) (120 .
  org-dynamic-block-insert-dblock) (4 . org-clock-display) (17 . org-clock-cancel) (10 . org-clock-goto) (15 .
  org-clock-out) (26 . org-resolve-clocks) (24 . org-clock-in-last) (9 . org-clock-in) (20 .
  org-toggle-time-stamp-overlays) (25 . org-paste-special) (27 keymap (22 . org-redisplay-inline-images) (119 .
  org-copy-special)) (23 . org-cut-special) (102 . org-footnote-action) (6 . org-emphasize) (62 .
  org-agenda-remove-restriction-lock) (60 . org-agenda-set-restriction-lock) (16 . org-previous-link) (14 .
  org-next-link) (118 . org-copy-visible) (113 . org-toggle-tags-groups) (98 . org-tree-to-indirect-buffer) (65 .
  org-archive-to-archive-sibling) (97 . org-toggle-archive-tag) (1 . org-archive-subtree-default) (19 .
  org-archive-subtree) (left . org-shiftcontrolleft) (right . org-shiftcontrolright) (68 . org-shiftmetadown) (85 .
  org-shiftmetaup) (82 . org-shiftmetaright) (76 . org-shiftmetaleft) (100 . org-insert-drawer) (117 . org-metaup) (114
  . org-metaright) (108 . org-metaleft) (13 . org-meta-return) (77 . org-insert-todo-heading) (109 . org-meta-return)
  (99 . org-clone-subtree-with-time-shift))) keymap (13 . outline-insert-heading) (67108926 . outline-demote) (67108924
  . outline-promote) (22 . outline-move-subtree-down) (30 . outline-move-subtree-up) (15 . outline-hide-other) (17 .
  outline-hide-sublevels) (11 . outline-show-branches) (12 . outline-hide-leaves) (5 . outline-show-entry) (3 .
  outline-hide-entry) (1 . outline-show-all) (20 . outline-hide-body) (2 . outline-backward-same-level) (6 .
  outline-forward-same-level) (21 . outline-up-heading) (4 . outline-hide-subtree) (19 . outline-show-subtree) (9 .
  outline-show-children) (16 . outline-previous-visible-heading) (14 . outline-next-visible-heading) (64 .
  outline-mark-subtree)) mode-specific-command-prefix)<br>Prefix command (definition is a keymap associating keystrokes
  with commands)."><kbd style="border-color: red">C-c</kbd></abbr> <abbr class="tooltip" style="border: none;
  text-decoration: none;" title="C-e ∷ evil-scroll-line-down<br>Scroll the window COUNT lines downwards.<br><br>(fn
  COUNT)"><kbd style="border-color: red">C-e</kbd></abbr>

   </div>


5 convert python 2 latex
========================

  ,----
  | import math
  | import numpy as np
  | import sys
  | import scipy
  | # import latexify
  `----



   python: sys.version  '3.12.3 (main, Apr  9 2024, 08:09:14) [GCC 13.2.0]' 
   np.__version__       '1.26.4'                                            
   scipy.__version__    '1.13.0'                                            
  Table 1: table of library's with corresponding version


  With the imported library's, we can now convert a `python' function to `latex'


  ,----
  |  1  def recHelper(x: int, d: int = 3) -> int:
  |  2      # forall x in [3, infty)
  |  3      if x % 2 == 0:
  |  4          return 0
  |  5      elif d > math.floor(math.sqrt(x)):
  |  6          return 1
  |  7      elif x % d == 0:
  |  8          return 0
  |  9      else:
  | 10          return recHelper(x, d + 2)
  | 11  
  | 12  def isPrime(x: int) -> int:
  | 13      if x <= 1:  # forall x in (infty, 1] : 1
  | 14          return 0
  | 15      elif x == 2:
  | 16          return 1
  | 17      else:  # forall x in (2, infty)
  | 18          return recHelper(x, 3)
  `----
  Listing 2: code block containing prime checking functions


  In line 12 is the main definition of the recursive basecase. Line 1 starts by declaring a recursive helper for the
  main prime checking function.


  \[ \mathrm{isPrime}(x) = \left\{ \begin{array}{ll} {0}, & \mathrm{if} \ {x \le {1}} \\ {1}, & \mathrm{if} \ {x = {2}}
  \\ \mathrm{recHelper}\left(x, {3}\right), & \mathrm{otherwise} \end{array} \right. \]
  \[ \mathrm{recHelper}(x, d) = \left\{ \begin{array}{ll} {0}, & \mathrm{if} \ {x \mathbin{\%} {2} = {0}} \\ {1}, &
  \mathrm{if} \ {d > \left\lfloor{\sqrt{x}}\right\rfloor} \\ {0}, & \mathrm{if} \ {x \mathbin{\%} d = {0}} \\
  \mathrm{recHelper}\left(x, d + {2}\right), & \mathrm{otherwise} \end{array} \right. \]



  Now we can call the `isPrime' function with the parameter `5' and `6':

  - is `5' a prime number? result of `isPrime' function: `True'
  - is `6' a prime number? result of `isPrime' function: `False'


6 Function composition
======================

  Graph using the `dot' language

  ,----
  | digraph G {
  |     node [shape=circle, fontname="Courier", fontsize=16]
  |     edge [fontname="Courier", fontsize=16]
  |     A:nw -> A [label="id"]
  |     A -> B [label="f"]
  |     B -> C [label="g"]
  |     A -> C [xlabel="g . f "]
  |     {rank=same; A B}
  | }
  `----

  <file:./img-gen-dir/function-composition.png>


  Graph using latex `tikz picture'


7 Some random Proof
===================

  Let

  \[ A = \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ 1 & 0 & 1 \end{pmatrix} \in \mathbb{R}^{3 \times 3}. \]

  Proof that the following applies to all $\beta \in \mathbb{N}_{>0}$ :

  \[ A^\beta = \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ \beta & 0 & 1 \end{pmatrix}. \]

  \enquote{Matrix multiplication as composition | Chapter 4, Essence of linear algebra} [1] The Matrix $A$ can also be
  interpreted as a linear transformation in $\R^3$.


  This interpretation makes it easier to understand the theorem to be proven, and makes it seem almost trivial.



  \[ \text{With} \vec{i} = (1, 0, \beta)^T \text{ and } \vec{j} = (0, 1, 0)^T \text{ and } \vec{k} = (0, 0, 1)^T. \]

  This means that only the $x$ coordinate is transformed. No matter how often you exponentiate this transformation, the
  $y$ and $z$ axes will not change, but the $x$ axis will increasingly approach the $y$ axis.

  $\mathrm{Z\kern-.3em\raise-0.5ex\hbox{Z}}$

  \[ \forall \beta \in \N^* \mid \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ 1 & 0 & 1 \end{pmatrix}^\beta =
  \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ \beta & 0 & 1 \end{pmatrix} \]




  \induction{\beta}

  \indv

  \[ \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ 1 & 0 & 1 \end{pmatrix}^\beta = \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\
  \beta & 0 & 1 \end{pmatrix} \]



  \vspace{1cm}

  \rem

  \begin{quote}
      $~~$\\
      \indb{\beta}{0} is also a valid starting point ...
  \end{quote}


  \vspace{1cm}


  \indb{\beta}{1}

  \[ \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ 1 & 0 & 1 \end{pmatrix}^1 = \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ 1 &
  0 & 1 \end{pmatrix} \]

  \inds{\beta}

  \begin{align}
      \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ 1 & 0 & 1 \end{pmatrix}^{\beta + 1} &= \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ (\beta + 1) & 0 & 1 \end{pmatrix} \\
      \Leftrightarrow \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ 1 & 0 & 1 \end{pmatrix}^\beta \cdot \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ 1 & 0 & 1 \end{pmatrix} &= \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ (\beta + 1) & 0 & 1 \end{pmatrix} \\
      \xLeftrightarrow{\star} \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ \beta & 0 & 1 \end{pmatrix} \cdot \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ 1 & 0 & 1 \end{pmatrix} &= \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ (\beta + 1) & 0 & 1 \end{pmatrix} \\
      \Leftrightarrow \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ \beta + 1 & 0 & 1 \end{pmatrix} &= \begin{pmatrix} 1 & 0 & 0 \\ 0 & 1 & 0 \\ \beta + 1 & 0 & 1 \end{pmatrix}
  \end{align}


8 plotting functions and their root function / derivation
=========================================================

8.1 python
~~~~~~~~~~

  ,----
  | import numpy as np
  | import matplotlib.pyplot as plt
  | import seaborn as sns
  | 
  | # Set seed for reproducibility
  | np.random.seed(42)
  | 
  | # Generate random 5x5 covariance matrix
  | cov_matrix = np.random.rand(5, 5)
  | cov_matrix = np.dot(cov_matrix, cov_matrix.T)
  | 
  | # Generate random data with the specified covariance matrix
  | data = np.random.multivariate_normal(mean=[0, 0, 0, 0, 0], cov=cov_matrix, size=100)
  | 
  | # Create scatter plot
  | plt.figure(figsize=(12, 6))
  | 
  | # Scatter plot
  | plt.subplot(1, 3, 1)
  | sns.scatterplot(x=data[:, 0], y=data[:, 1])
  | plt.title('Scatter Plot')
  | 
  | # Box plot
  | plt.subplot(1, 3, 2)
  | sns.boxplot(data=data)
  | plt.title('Box Plot')
  | 
  | # Violin plot
  | plt.subplot(1, 3, 3)
  | sns.violinplot(data=data, inner='quartile', palette='muted')
  | plt.title('Violin Plot')
  | 
  | plt.tight_layout()
  | # plt.show()
  | plt.savefig("./img-gen-dirrandom-py-plot.png")
  `----


  <file:./img-gen-dir/random-py-plot.png>



  ,----
  | import seaborn as sns
  | import matplotlib.pyplot as plt
  | from sklearn.datasets import load_iris
  | import numpy as np
  | 
  | # Load the Iris dataset from scikit-learn
  | iris = load_iris()
  | iris_data = iris.data
  | iris_feature_names = iris.feature_names
  | 
  | # Create a covariance matrix
  | cov_matrix = np.cov(iris_data, rowvar=False)
  | 
  | # Create a heatmap using Seaborn
  | plt.figure(figsize=(8, 6))
  | sns.heatmap(cov_matrix, annot=True, cmap='coolwarm', xticklabels=iris_feature_names, yticklabels=iris_feature_names)
  | plt.title('Covariance Matrix of Iris Dataset Features')
  | # plt.show()
  | plt.savefig("./img-gen-dir/random-covariance-fig.png")
  `----


  <file:./img-gen-dir/random-covariance-fig.png>


8.2 tikzpicture
~~~~~~~~~~~~~~~


8.3 org plot
~~~~~~~~~~~~

  see <https://orgmode.org/manual/Org-Plot.html>

   Sede       Max cites  H-index 
  -------------------------------
   Chile         257.72    21.39 
   Leeds         165.77    19.68 
   Sao Paolo      71.00    11.50 
   Stockholm     134.19    14.33 
   Morelia       257.56    17.67 

  <file:./img-gen-dir/citas.png>


  <file:./img-gen-dir/eval-of-plaintext-formats.png>



   Sede           Max cites               
  ----------------------------------------
   Chile             257.72  WWWWWWWWWWWW 
   Leeds             165.77  WWWWWWWh     
   Sao Paolo          71.00  WWW;         
   Stockholm         134.19  WWWWWW:      
   Morelia           257.56  WWWWWWWWWWWW 
   Rochefourchat       0.00               
   test ...            42.0  WW           


8.4 gnu plot
~~~~~~~~~~~~

  see <https://gitlab.com/dto/health-template/-/tree/main?ref_type=heads> by David O'Toole


   Date              exercise minutes  sleep hours  nicotine doses  distress scale  missed doses  pain scale 
  -----------------------------------------------------------------------------------------------------------
   [2022-09-13 Tue]                 0           12               8               5             0           0 
   [2022-09-14 Wed]                 0           12               7               4             0           0 
   [2022-09-15 Thu]                20           12               8               3             1           0 
   [2022-09-16 Fri]                15           14               5               3             0           0 
   [2022-09-17 Sat]                30           12               7               4             0           1 
   [2022-09-18 Sun]                15            9               7               5             0           2 
   [2022-09-19 Mon]                 0            7               6               6             0           3 
   [2022-09-20 Tue]                20            8               7               4             0           3 
   [2022-09-21 Wed]                15           10               5               3             0           3 
   [2022-09-22 Thu]                20           11               6             3.5             0           3 
   [2022-09-23 Fri]                 0            9               6               3             0           3 
   [2022-09-24 Sat]                10           13               6               2             0           3 
   [2022-09-25 Sun]                 0          8.5               5               2             0           2 
   [2022-09-26 Mon]                15           13               7               6             0           2 
   [2022-09-27 Tue]                 0           10               5               5             1           2 
   [2022-09-28 Wed]                30           10               5               3             0           2 
   [2022-09-29 Thu]                 0           12               4               3             0           2 
   [2022-09-30 Fri]                20            6               4               4             0           2 
   [2022-10-01 Sat]                10          7.5               6               3             0           2 
   [2022-10-02 Sun]                15            8               7               2             0           2 
   [2022-10-03 Mon]                 0            6               5               2             0           2 
   [2022-10-04 Tue]                 0          8.5               5               4             0           2 
   [2022-10-05 Wed]                15            8               5               4             0           2 
   [2022-10-06 Thu]                25          8.5               5               4             0           2 
   [2022-10-07 Fri]                25            6               5               3             0           2 
   [2022-10-08 Sat]                20            9               0               3             0           2 
   [2022-10-09 Sun]                 0            6               3               4             0           2 
   [2022-10-10 Mon]                 0            6               5               5             0           2 
   [2022-10-11 Tue]                 0          6.5               4               4             0           2 
   [2022-10-12 Wed]                 0            3               0               3             0           2 
   [2022-10-13 Thu]                 0          4.5               0               3             0           3 
   [2022-10-14 Fri]                 0            4               0               3             0           3 
   [2022-10-15 Sat]                 0            5               0               3             1           2 
   [2022-10-16 Sun]                 0            2               0               4             0           1 
   [2022-10-17 Mon]                 0          4.5               0               3             0           2 

  <file:./img-gen-dir/example.png>


9 logic resolution proof
========================

  \lipsum[2-4]


9.1 forward direction (->)
~~~~~~~~~~~~~~~~~~~~~~~~~~

  \[\frac{\displaystyle  \qquad \frac{\displaystyle  \qquad \frac{\displaystyle  \qquad \frac{\displaystyle  \qquad \frac{\displaystyle  \qquad [A]^3 \qquad [A \rightarrow B]^1}{B}[\text{mp}] \qquad [\lnot B]^2}{\perp}[\text{$\lnot E$}]}{\lnot A}[\text{$\lnot I^3$}]}{\lnot B \rightarrow \lnot A}[\text{$\rightarrow I^2$}]}{(A \rightarrow B) \rightarrow (\lnot B \rightarrow \lnot A)}[\text{$\rightarrow I^1$}]\]


9.2 back direction (<-)
~~~~~~~~~~~~~~~~~~~~~~~

  \[\frac{\displaystyle  \qquad \frac{\displaystyle  \qquad \frac{\displaystyle  \qquad \frac{\displaystyle  \qquad [A]^5 \qquad \frac{\displaystyle  \qquad [\lnot B]^6 \qquad [\lnot B \rightarrow \lnot A]^4}{\lnot A}[\text{mp}]}{\perp}[\text{$\lnot E$}]}{B}[\text{$\text{raa}^6$}]}{A \rightarrow B}[\text{$\rightarrow I^5$}]}{(\lnot B \rightarrow \lnot A) \rightarrow (A \rightarrow B)}[\text{$\rightarrow I^4$}]\]


9.3 both directions (<->)
~~~~~~~~~~~~~~~~~~~~~~~~~

  \[\frac{\displaystyle  \qquad (A \rightarrow B) \rightarrow (\lnot B \rightarrow \lnot A) \qquad (\lnot B \rightarrow \lnot A) \rightarrow (A \rightarrow B)}{\vdash (A \rightarrow B) \leftrightarrow (\lnot B \rightarrow \lnot A)}[\text{$\leftrightarrow$ I}]\]


10 some random appendix
=======================

  maybe add a document or other related but not that important info, listings plots etc. here ...


11 TOC's
========

   ABA  alternierender Büchi-Automat          engl. alternating Büchi automaton     
   AFA  alternierender endlicher Automat      engl. alternating f inite automaton   
   BA   Büchi-Automat                         engl. Büchi automaton                 
   BNF  Normalform kontextfreier Grammatiken  engl. Backus–N aur f orm              
   DFA  endlicher Automat                     engl. deterministic f inite automaton 


  List of Listings
  ________________

  Listing 1: `nix-shell' config for generating a build environment
  Listing 2: code block containing prime checking functions

  List of Tables
  ______________

  Table 1: table of library's with corresponding version



Footnotes
_________

[1] see \url{https://youtu.be/XkY2DOUCWMU}
